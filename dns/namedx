#!/usr/bin/perl -w
use strict;

use Net::DNS::Nameserver;
use IP::QQWry::Decoded;
use Encode qw();
use Getopt::Long;
use Sys::Syslog;
use subs qw(verbose warning fatal_error load_config);
use Data::Dumper;

# main variables
my $local_addr = '10.0.0.2';
my $config_file = '/data/namedx/namedx.conf';
my $qqwry_file  = '/data/namedx/qqwry.dat';


# init syslog
openlog('namedx', "ndelay,pid", "local6");

# init pid file
create_pid_file( '/var/run/namedx.pid' );

$0 = "namedx: listening on $local_addr";

my $VERSION = '1.00';
GetOptions(\my %opts, 'help|h', 'verbose|v', 'quiet|q');

my $qqwry       = IP::QQWry::Decoded->new($qqwry_file, 'gbk');

my $template = {
    A   =>  '3600 IN A',    MX  =>  '3600 MX 10',
    TXT =>  '3600 IN TXT',  SPF =>  '3600 IN TXT',
    DKIM => '3600 IN TXT',  PTR =>  '3600 IN PTR',
    CNAME => '3600 IN CNAME',
};

my $config;
load_config($config_file, \$config);

sub reply_handler {
    my ($qname, $qclass, $qtype, $qhost,$query,$conn) = @_;
    my ($rcode, @ans, @auth, @add);

    my $qisp = get_isp($qhost);
    verbose("query from $qhost($qisp) for ${qname} $qtype");

    # modified query information 
    my $rdata;          # predefined rdata. answers with higher priority than rule
    my $name = $qname;
    my $type = $qtype;
    my $isp  = $qisp;
    my $host = $qhost;
    my $nocache;

    if ( $qhost =~ /^(10)\./ and $qname =~ /^(config|cache)$/ ) {
        if ( $qname eq 'config' ) {
            $config = {};
            load_config($config_file, \$config);
            verbose("reload config by $qhost");
        } 
        elsif ( $qname eq 'cache' ) {
            $config->{cache} = {};
            verbose("reload cache by $qhost");
        }
        $rdata = [$qhost];
        $nocache = 1;
    }
    elsif ( $qtype eq 'PTR' ) {
        if ( $qname =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.in-addr\.arpa$/i ) {
            $name = "$4.$3.$2.$1";
        }
    }
    elsif ( $qtype eq 'TXT' ) {
        $type = $qname =~ /^dkim\._domainkey\./i ? 'DKIM' : 'SPF';
    }
    elsif ( $qtype eq 'AAAA' ) {
        $type = 'A';
    }

    my $q = {
        # original query information
        qname => $qname, qtype => $qtype, qisp => $qisp, qhost => $qhost,

        # modified query information 
        name => $name,   type => $type,   isp => $isp, host => $host,

        rdata => $rdata, nocache => $nocache,

        # stringify query for cache ID
        as_string => "$qtype $qname $qhost",
    };

    my $rr = get_rr($q);

    return $rr ? ("NOERROR", $rr, \@auth, \@add, { aa => 1 })
               : ("NXDOMAIN",  \@ans, \@auth, \@add, { aa => 1 });
}

my $ns = Net::DNS::Nameserver->new(
    LocalPort    => 53,
    ReplyHandler => \&reply_handler,
    Verbose      => 0,
) || die "couldn't create nameserver object\n";

$ns->main_loop;

sub load_config {
    my $config_file = shift;
    my $config_ref  = shift;
    verbose("load config from $config_file");
    foreach my $line ( reverse slurp($config_file) ) {
        chomp $line;
        next unless $line;
        my $action  = substr($line, 0, 1);
        my $data    = substr($line, 1);
        if ( $action eq '=' ) {
            load_config($data, $config_ref);
        }
        elsif ( $action eq '!' ) {
            verbose("load ISP from $data");
            load_isp($data, $config_ref);
        }
        elsif ( $action eq '+' ) {
            verbose("load rule from $config_file: $data");
            load_rule($data, $config_ref);
        }
    }
}

sub load_isp {
    my ($data, $config_ref) = @_;
    return unless $data =~ /^([\d\.]+)\s+(.+)$/;
    $$config_ref->{isp}->{$1} = $2;
}

sub load_rule {
    my ($data, $config_ref) = @_;

    my $rule;
    # ignore wrong formated data
    if ($data !~ /^(A|MX|NS|PTR|TXT|SPF|DKIM|CNAME)(?:\s+([a-zA-Z0-9-\.]+))?(?:{([^}]+)})?:\s*(.+)\s*$/) {
        verbose("drop wrong formated data: $data");
        return;
    }

    $rule = { type => $1, name => $2 };

    if ( $3 ) {
        eval { $rule->{isp} = qr/$3/ };
        if ( $@ ) { warn "illegal regex detected: $@ $data"; exit; }
    }

    my @rdata = split /,\s*/, $4;
    $rule->{rdata} = \@rdata;
    $rule->{as_string} = $data;
    push @{$$config_ref->{rules}}, $rule;
}

sub get_isp {
    my $address = shift;
    my $isp = $config->{isp}->{$address}
        || $qqwry->query($address)
            || '未登记';
#    Encode::_utf8_off($isp);
    Encode::_utf8_on($isp);

    $isp;
}

sub get_rr {
    my $query = shift;

    my $qid   = $query->{as_string};
    return $config->{cache}->{$qid} if $config->{cache}->{$qid};

    my $qname = $query->{qname};
    my $qtmpl = $template->{$query->{type}};
    my $rdata = $query->{rdata} || get_rdata($query);
    my @rr;
    if ( $qname and $qtmpl and $rdata ) {
        @rr = map { Net::DNS::RR->new("$qname $qtmpl $_") } @$rdata;
        $config->{cache}->{$qid} = \@rr unless $query->{nocache};
    }
    \@rr;
}

sub get_rdata {
    my $query = shift;

    my $rdata = [];
    foreach my $rule (@{$config->{rules}}) {
        $rdata = get_rdata_by_rule($query, $rule);
        return $rdata if $rdata;
    }

    $rdata;
}

sub get_rdata_by_rule {
    my ($query, $rule) = @_;

    # type name ttl class type host address
    if ( defined $rule->{name} and $query->{name} ne $rule->{name} ) {
        return;
    }
    if ( $query->{type} !~ m!$rule->{type}! ) {
        return;
    }

    if ( $rule->{isp} and $query->{isp} !~ m!$rule->{isp}! ) {
        return;
    }

    my $rdata = $rule->{rdata};
    $rdata;
}

sub slurp {
  my $file = $_[0];
  open my $fh, "<", $file or fatal_error "unable to open $file: $!";
  local $/ unless wantarray;
  return <$fh>;
}

sub create_pid_file {
    my $pid_file = shift;
    if ( -e $pid_file ) {
        syslog(4, "Pid file $pid_file already exists... aborting");
        exit 1;
    }
    if( ! open(_PID, ">", $pid_file) ){
        syslog(4, "Couldn't open pid file \"$pid_file\" [$!].");
        exit 1;
    }
    print _PID "$$\n";
    close _PID;
}

# simple logger
sub verbose     { syslog(4, shift || ''); }
sub warning 	{ syslog(4, shift || ''); }
sub fatal_error { syslog(4, shift || ''); exit 1 }


__END__

=pod

=head1 NAME

namedx - authoritative-only DNS server with diskless cache

=head1 SYNOPSIS

    namedx [options]

=head1 DESCRIPTION

The F<namedx> script is used to provide customized DNS service for
Elink EDM business.

=head1 AUTHOR

Billy Woo <billywoo@live.com>

=head1 COPYRIGHT

Copyright 2011 - 2012 Billy Woo.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut


